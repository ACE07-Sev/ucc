name: Run Benchmarks

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to run benchmarks on'
        required: false
        default: 'main'

jobs:
  run-benchmarks:
    runs-on: ucc-benchmarks-8-core-U22.04

    steps:
      # Checkout the repository and branch
      - name: Checkout branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Ensure the full history is fetched

      # Build the Docker image
      - name: Build Docker image
        run: docker build -t ucc-benchmark .

     # Run benchmarks in Docker container and commit the results
      - name: Run benchmarks
        run: |
          docker run --rm \
            -v "${{ github.workspace }}:/ucc" \
            ucc-benchmark bash -c "
              source /venv/bin/activate && \
              ./benchmarks/scripts/small_test.sh
            "
      
      # Configure Git for commit
      - name: Configure Git for commit
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
      
      # Commit and push results to a new temporary branch
      - name: Commit and push results to a new branch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create a temporary branch based on the current state
          git checkout -b auto-benchmarks
          
          # Stage and commit changes
          git add benchmarks/*
          git commit -m "Update benchmark results" || echo "No changes to commit"
          
          # Push the new branch to the remote repository
          git push origin HEAD
      
      # Create a pull request to merge the new branch into main
      - name: Create Pull Request
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        id: create_pr
        run: |
          # Get the current branch name
          HEAD_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          
          # Create the PR
          RESPONSE=$(curl -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/pulls \
            -d "$(jq -n \
                --arg title "Update benchmark results" \
                --arg head "$HEAD_BRANCH" \
                --arg base "main" \
                '{title: $title, head: $head, base: $base}')")
          echo "$RESPONSE" > pr_response.json
          PR_NUMBER=$(jq -r '.number' <<< "$RESPONSE")
          echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
      
      # Auto-approve and merge the pull request (if necessary)
      - name: Auto-Approve and Merge Pull Request
        if: env.PR_NUMBER != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER=$(jq -r '.number' < pr_response.json)
          
          # Approve the PR
          curl -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER/reviews \
            -d '{"event": "APPROVE"}'
          
          # Merge the PR
          curl -X PUT \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER/merge \
            -d '{"merge_method": "squash"}'
